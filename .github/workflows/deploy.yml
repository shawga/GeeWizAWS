# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: eu-west-1 #${{ secrets.AWS_REGION }}     # set this to your preferred AWS region, e.g. us-west-1
  AWS_ROLE_TO_ASSUME: arn:aws:iam::209479297458:role/GitHubActionsRole-production #${{ secrets.AWS_ROLE_TO_ASSUME }} 

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    #- name: Debug GitHub identity
     # run: |
     #   echo "Ref: ${{ github.ref }}"
     #   echo "Environment: ${{ github.environment }}"
     #   echo "Repo: ${{ github.repository }}"
     #   echo "Actor: ${{ github.actor }}" 
     #   echo "role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}" 
     #   echo "aws-region: ${{ env.AWS_REGION }}" 

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }} 
        aws-region: ${{ env.AWS_REGION }}
        #  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Deploy
      #id: build-image
      #env: 
      #  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #  IMAGE_TAG: ${{ github.sha }}
      run: 
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        ./deploy-prod.sh  

    #- name: Fill in the new image ID in the Amazon ECS task definition
    #  id: task-def
    #  uses: aws-actions/amazon-ecs-render-task-definition@v1
    #  with:
    #    task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #    container-name: ${{ env.CONTAINER_NAME }}
    #    image: ${{ steps.build-image.outputs.image }}

    #- name: Deploy Amazon ECS task definition
    #  uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #  with:
    #    task-definition: ${{ steps.task-def.outputs.task-definition }}
    #    service: ${{ env.ECS_SERVICE }}
    #    cluster: ${{ env.ECS_CLUSTER }}
    #    wait-for-service-stability: true


